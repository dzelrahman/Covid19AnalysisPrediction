ggplot(temp_conf, aes(x=DATE, y=CONFIRMED, color=SEGMENT)) +
geom_line(size=1) +
theme_ap()
devtools::install_github('bbc/bbplot')
library(bbplot)
ggplot(temp_conf, aes(x=DATE, y=CONFIRMED, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
plot_conf <- ggplot(temp_conf, aes(x=DATE, y=CONFIRMED, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
finalise_plot(plot_name = plot_conf,
source = "Source: ONS",
save_filepath = "filename_that_my_plot_should_be_saved_to-nc.png",
width_pixels = 640,
height_pixels = 550)
finalise_plot(plot_name = plot_conf,
source = "Source: John Hopkins University",
save_filepath = "plot_conf.png",
width_pixels = 640,
height_pixels = 550)
temp %>% group_by(DATE,SEGMENT) %>% summarize(DEATH=sum(DEATH))
temp_death <- temp %>% group_by(DATE,SEGMENT) %>% summarize(DEATH=sum(DEATH))
plot_death <- ggplot(temp_death, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
plot_death
finalise_plot(plot_name = plot_death,
source = "Source: John Hopkins University",
save_filepath = "plot_death.png",
width_pixels = 640,
height_pixels = 550)
temp %>% group_by(DATE,SEGMENT) %>% summarize(DEATH=usm(DEATH)) %>% filter(SEGMENT == "Rest of the World")
temp %>% group_by(DATE,SEGMENT) %>% summarize(DEATH=sum(DEATH)) %>% filter(SEGMENT == "Rest of the World")
temp_death_world <- temp %>% group_by(DATE,SEGMENT) %>% summarize(DEATH=sum(DEATH)) %>% filter(SEGMENT == "Rest of the World")
plot_death_world <- ggplot(temp_death_world, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
finalise_plot(plot_name = plot_death,
source = "Source: John Hopkins University",
save_filepath = "plot_death_world.png",
width_pixels = 640,
height_pixels = 550)
temp_death_world
plot_death_world <- ggplot(temp_death_world, aes(x=DATE, y=DEATH)) +
geom_line(size=1) +
bbc_style()
finalise_plot(plot_name = plot_death,
source = "Source: John Hopkins University",
save_filepath = "plot_death_world.png",
width_pixels = 640,
height_pixels = 550)
finalise_plot(plot_name = plot_death_world,
source = "Source: John Hopkins University",
save_filepath = "plot_death_world.png",
width_pixels = 640,
height_pixels = 550)
plot_death_world <- ggplot(temp_death_world, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
finalise_plot(plot_name = plot_death_world,
source = "Source: John Hopkins University",
save_filepath = "plot_death_world.png",
width_pixels = 640,
height_pixels = 550)
temp_rec <- temp %>% group_by(DATE,SEGMENT) %>% summarize(RECOVERED=sum(RECOVERED))
plot_rec <- ggplot(temp_rec, aes(x=DATE, y=RECOVERED, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
finalise_plot(plot_name = plot_rec,
source = "Source: John Hopkins University",
save_filepath = "plot_rec.png",
width_pixels = 640,
height_pixels = 550)
temp
temp_death
temp_death
temp_conf
temp %>% group_by(DATE, SEGMENT) %>% summarize(DEATH=sum(DEATH),CONFIRMED=sum(CONFIRMED))
temp_death_conf <- temp %>% group_by(DATE, SEGMENT) %>% summarize(DEATH=sum(DEATH),CONFIRMED=sum(CONFIRMED))
temp_death_conf
temp_death_conf %>% mutate(DEATHRATE = 100*(DEATH / CONFIRMED))
temp_death_conf %>% mutate(DEATHRATE = FLOOR(100*(DEATH / CONFIRMED)))
temp_death_conf %>% mutate(DEATHRATE = 100*(DEATH / CONFIRMED))
temp_death_rate <- temp_death_conf %>% mutate(DEATHRATE = 100*(DEATH / CONFIRMED))
temp_death_rate
plot_death_rate <- ggplot(temp_death_rate, aes(x=DATE, y=DEATHRATE, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
finalise_plot(plot_name = plot_death_rate,
source = "Source: John Hopkins University",
save_filepath = "plot_death_rate.png",
width_pixels = 640,
height_pixels = 550)
temp_rec_conf <- temp %>% group_by(DATE, SEGMENT) %>% summarize(RECOVERED=sum(RECOVERED),CONFIRMED=sum(CONFIRMED))
temp_rec_rate <- temp_rec_conf %>% mutate(RECRATE = 100*(RECOVERED / CONFIRMED))
plot_rec_rate <- ggplot(temp_rec_rate, aes(x=DATE, y=RECRATE, color=SEGMENT)) +
geom_line(size=1) +
bbc_style()
finalise_plot(plot_name = plot_rec_rate,
source = "Source: John Hopkins University",
save_filepath = "plot_rec_rate.png",
width_pixels = 640,
height_pixels = 550)
install.packages("prophet")
library(prophet)
temp
temp %>% group_by(DATE) %>% summarize(CONFIRMED=sum(CONFIRMED))
temp_prophet <- temp %>% group_by(DATE) %>% summarize(CONFIRMED=sum(CONFIRMED))
temp_prophet
temp
temp_prophet <- temp %>% group_by(DATE) %>%  summarize(CONFIRMED=sum(CONFIRMED)) %>% filter(COUNTRY != "Mainland China")
temp
temp_prophet <- temp %>% group_by(DATE) %>%  summarize(CONFIRMED=sum(CONFIRMED)) %>% filter("COUNTRY" != "Mainland China")
temp_prophet
temp_prophet <- temp_prophet %>% rename(ds = DATE, y = RIDES)
temp_prophet <- temp_prophet %>% rename(ds = "DATE", y = "RIDES")
temp_prophet
temp_prophet <- temp_prophet %>% rename(ds = DATE, y = CONFIRMED)
temp_prophet
m <- prophet(temp_prophet, changepoint.prior.scale = 0.01)
future <- make_future_dataframe(m, periods = 337)
tail(future)
forecast %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
tail()
forecast <- predict(m, future)
forecast %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
tail()
forecasted_conf <- forecast %>%
arrange(desc(ds)) %>%
slice(1) %>%
pull(yhat) %>%
round()
forecasted_conf
forecast_p <- plot(m, forecast) +
labs(x = "",
y = "rides",
title = "Projected Daily Rides",
subtitle = "To September 1, 2019") +
theme_ipsum_rc()
forecast_p <- plot(m, forecast) +
labs(x = "",
y = "rides",
title = "Projected Daily Rides",
subtitle = "To September 1, 2019")
forecast_p
m <- prophet(temp_prophet, changepoint.prior.scale = 0.01)
future <- make_future_dataframe(m, periods = 30)
tail(future)
forecast <- predict(m, future)
forecast %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
tail()
forecasted_conf <- forecast %>%
arrange(desc(ds)) %>%
slice(1) %>%
pull(yhat) %>%
round()
forecasted_conf
forecast_p <- plot(m, forecast) +
labs(x = "",
y = "rides",
title = "Projected Daily Rides",
subtitle = "To September 1, 2019")
forecast_p
forecast_p <- plot(m, forecast) +
labs(x = "",
y = "rides",
title = "Projected Confirmed",
subtitle = "To Next Month")
forecast_p
prophet_plot_components(m, forecast)
forecast_p
prophet_plot_components(m, forecast)
m <- prophet(temp_prophet)
future <- make_future_dataframe(m, periods = 30)
tail(future)
forecast <- predict(m, future)
forecast %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
tail()
forecasted_conf <- forecast %>%
arrange(desc(ds)) %>%
slice(1) %>%
pull(yhat) %>%
round()
forecasted_conf
forecast_p <- plot(m, forecast) +
labs(x = "",
y = "confirmed case",
title = "Projected Confirmed",
subtitle = "To Next Month")
forecast_p
prophet_plot_components(m, forecast)
ggsave("forecasted_conf.png", forecasted_conf, width = 10, height = 5)
ggsave("forecasted_conf.png", forecast_p, width = 10, height = 5)
plot(m, forecast) +
labs(x = "",
y = "confirmed case",
title = "Projected Confirmed",
subtitle = "To Next Month") + bbc_style()
forecast_p <- plot(m, forecast) +
labs(x = "",
y = "confirmed case",
title = "Projected Confirmed",
subtitle = "To Next Month") + bbc_style()
ggsave("forecasted_conf.png", forecast_p, width = 10, height = 5)
finalise_plot(plot_name = forecast_p,
source = "Source: John Hopkins University",
save_filepath = "forecasted_conf_2.png",
width_pixels = 640,
height_pixels = 550)
dyplot.prophet(m, forecast)
prophet_plot_components(m, forecast)
forecast_p
temp_prophet_ex_china <- temp %>% group_by(DATE) %>%  summarize(CONFIRMED=sum(CONFIRMED)) %>% filter(COUNTRY != "Mainland China")
temp
temp_prophet_ex_china <- temp %>% group_by(DATE) %>%  summarize(CONFIRMED=sum(CONFIRMED)) %>% filter(`COUNTRY` != "Mainland China")
temp_prophet_inc_china <- temp %>% group_by(DATE) %>%  summarize(CONFIRMED=sum(CONFIRMED))
temp_prophet_inc_china
temp_prophet
temp_prophet_ex_china <- temp %>% group_by(DATE) %>%  filter(COUNTRY != "Mainland China") %>% summarize(CONFIRMED=sum(CONFIRMED))
temp_prophet_ex_china
temp_prophet_ex_china <- temp_prophet_ex_china %>% rename(ds = DATE, y = CONFIRMED)
temp_prophet_ex_china
# Confirm Forecast w/o China
m_world <- prophet(temp_prophet_ex_china)
future_world <- make_future_dataframe(m_world, periods = 30)
tail(future_world)
forecast_world <- predict(m_world, future_world)
forecast_world %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
tail()
forecasted_conf_world <- forecast_world %>%
arrange(desc(ds)) %>%
slice(1) %>%
pull(yhat) %>%
round()
forecasted_conf_world
forecast_p_world <- plot(m_world, forecast_world) +
labs(x = "",
y = "confirmed case",
title = "Projected Confirmed",
subtitle = "To Next Month") + bbc_style()
forecast_p_world
# ggsave("forecasted_conf.png", forecast_p, width = 10, height = 5)
finalise_plot(plot_name = forecast_p_world,
source = "Source: John Hopkins University",
save_filepath = "forecasted_conf_world.png",
width_pixels = 640,
height_pixels = 550)
temp_prophet_death <- temp %>% group_by(DATE) %>%  summarize(DEATH=sum(DEATH))
temp_prophet_death <- temp %>% group_by(DATE) %>%  summarize(DEATH=sum(DEATH))
temp_prophet_death <- temp_prophet %>% rename(ds = DATE, y = DEATH)
temp_prophet_death <- temp_prophet_death %>% rename(ds = DATE, y = DEATH)
temp_prophet_death
# Death Forecast
temp_prophet_death <- temp %>% group_by(DATE) %>%  summarize(DEATH=sum(DEATH))
temp_prophet_death <- temp_prophet_death %>% rename(ds = DATE, y = DEATH)
m_death <- prophet(temp_prophet_death)
future_death <- make_future_dataframe(m_death, periods = 30)
tail(future_death)
forecast_death <- predict(m_death, future_death)
forecast_death %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
tail()
forecasted_death <- forecast_death %>%
arrange(desc(ds)) %>%
slice(1) %>%
pull(yhat) %>%
round()
forecasted_death
forecast_p_death <- plot(m_death, forecast_death) +
labs(x = "",
y = "death case",
title = "Projected Death",
subtitle = "To Next Month") + bbc_style()
forecast_p_death
# ggsave("forecasted_conf.png", forecast_p, width = 10, height = 5)
finalise_plot(plot_name = forecast_p_death,
source = "Source: John Hopkins University",
save_filepath = "forecasted_death.png",
width_pixels = 640,
height_pixels = 550)
plot_conf <- ggplot(temp_conf, aes(x=DATE, y=CONFIRMED, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Confirm Case",
title = "Confirmed Cases",
subtitle = "Around the World") +
bbc_style()
finalise_plot(plot_name = plot_conf,
source = "Source: John Hopkins University",
save_filepath = "plot_conf.png",
width_pixels = 640,
height_pixels = 550)
plot_death <- ggplot(temp_death, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Death Cases",
title = "Death Cases",
subtitle = "Around the World") +
bbc_style()
finalise_plot(plot_name = plot_death,
source = "Source: John Hopkins University",
save_filepath = "plot_death.png",
width_pixels = 640,
height_pixels = 550)
plot_rec <- ggplot(temp_rec, aes(x=DATE, y=RECOVERED, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Recovered Cases",
title = "Recovered Cases",
subtitle = "Around the World") +
bbc_style()
finalise_plot(plot_name = plot_rec,
source = "Source: John Hopkins University",
save_filepath = "plot_rec.png",
width_pixels = 640,
height_pixels = 550)
plot_death_rate <- ggplot(temp_death_rate, aes(x=DATE, y=DEATHRATE, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Rate",
title = "Death Rate",
subtitle = "Around the World") +
bbc_style()
finalise_plot(plot_name = plot_death_rate,
source = "Source: John Hopkins University",
save_filepath = "plot_death_rate.png",
width_pixels = 640,
height_pixels = 550)
plot_rec_rate <- ggplot(temp_rec_rate, aes(x=DATE, y=RECRATE, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Rate",
title = "Recovery Rate",
subtitle = "Around the World") +
bbc_style()
finalise_plot(plot_name = plot_rec_rate,
source = "Source: John Hopkins University",
save_filepath = "plot_rec_rate.png",
width_pixels = 640,
height_pixels = 550)
plot_death_rate <- ggplot(temp_death_rate, aes(x=DATE, y=DEATHRATE, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Rate",
title = "COVID-19 Death Rate",
subtitle = "Around the World") +
bbc_style()
finalise_plot(plot_name = plot_death_rate,
source = "Source: John Hopkins University",
save_filepath = "plot_death_rate.png",
width_pixels = 640,
height_pixels = 550)
plot_rec_rate <- ggplot(temp_rec_rate, aes(x=DATE, y=RECRATE, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Rate",
title = "COVID-19 Recovery Rate",
subtitle = "Around the World") +
bbc_style()
finalise_plot(plot_name = plot_rec_rate,
source = "Source: John Hopkins University",
save_filepath = "plot_rec_rate.png",
width_pixels = 640,
height_pixels = 550)
knitr::opts_chunk$set(echo = TRUE)
str(conf_rw)
head(summary, 1)
ggplot(temp_death_world, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Confirm Case",
title = "Confirmed Cases",
subtitle = "Around the World") +
bbc_style()
ggplot(temp_death, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Death Cases",
title = "Death Cases",
subtitle = "Around the World") +
bbc_style()
library(tidyverse)
library(data.table)
library(apstyle)
library(bbplot)
ggplot(temp_death, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Death Cases",
title = "Death Cases",
subtitle = "Around the World") +
bbc_style()
ggplot(temp_death_world, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Confirm Case",
title = "Confirmed Cases",
subtitle = "Around the World") +
bbc_style()
ggplot(temp_death, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Death Cases",
title = "Death Cases",
subtitle = "Around the World") +
bbc_style()
forecast %>%
select(ds, yhat, yhat_lower, yhat_upper) %>%
tail()
forecasted_conf
forecast_p
forecasted_death
forecast_p_death
prophet_plot_components(m, forecast)
library(prophet)
prophet_plot_components(m, forecast)
plot_daily_weekly <- prophet_plot_components(m, forecast)
plot_daily_weekly
prophet_plot_components(m, forecast)
library(tufte)
install.packages("tufte")
library(tufte)
# invalidate cache when the tufte version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tufte'))
options(htmltools.dir.version = FALSE)
library(tidyverse)
library(data.table)
library(apstyle)
library(bbplot)
plot_death
temp_death <- temp %>% group_by(DATE,SEGMENT) %>% summarize(DEATH=sum(DEATH))
plot_death <- ggplot(temp_death, aes(x=DATE, y=DEATH, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Death Cases",
title = "Death Cases",
subtitle = "Around the World") +
bbc_style()
plot_death
finalise_plot(plot_name = plot_conf,
source = "Source: John Hopkins University",
save_filepath = "plot_conf.png",
width_pixels = 640,
height_pixels = 550)
plot_conf <- ggplot(temp_conf, aes(x=DATE, y=CONFIRMED, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Confirm Case",
title = "Confirmed Cases",
subtitle = "Around the World") +
bbc_style()
plot_conf
temp_rec <- temp %>% group_by(DATE,SEGMENT) %>% summarize(RECOVERED=sum(RECOVERED))
plot_rec <- ggplot(temp_rec, aes(x=DATE, y=RECOVERED, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Recovered Cases",
title = "Recovered Cases",
subtitle = "Around the World") +
bbc_style()
plot_rec
temp_death_conf <- temp %>% group_by(DATE, SEGMENT) %>% summarize(DEATH=sum(DEATH),CONFIRMED=sum(CONFIRMED))
temp_death_rate <- temp_death_conf %>% mutate(DEATHRATE = 100*(DEATH / CONFIRMED))
plot_death_rate <- ggplot(temp_death_rate, aes(x=DATE, y=DEATHRATE, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Rate",
title = "COVID-19 Death Rate",
subtitle = "Around the World") +
bbc_style()
plot_death_rate
temp_rec_conf <- temp %>% group_by(DATE, SEGMENT) %>% summarize(RECOVERED=sum(RECOVERED),CONFIRMED=sum(CONFIRMED))
temp_rec_rate <- temp_rec_conf %>% mutate(RECRATE = 100*(RECOVERED / CONFIRMED))
plot_rec_rate <- ggplot(temp_rec_rate, aes(x=DATE, y=RECRATE, color=SEGMENT)) +
geom_line(size=1) +
labs(x = "",
y = "Rate",
title = "COVID-19 Recovery Rate",
subtitle = "Around the World") +
bbc_style()
plot_rec_rate
forecast_p <- plot(m, forecast) +
labs(x = "",
y = "confirmed case",
title = "Projected Confirmed",
subtitle = "To Next Month") + bbc_style()
forecast_p
forecast_p_death <- plot(m_death, forecast_death) +
labs(x = "",
y = "death case",
title = "Projected Death",
subtitle = "To Next Month") + bbc_style()
forecast_p_death
str(covid)
covid
write_csv(x = head(covid), path = "covid.csv")
str(covid)
write_csv(x = head(temp), path = "temp.csv")
temp
temp_conf
write_csv(x = head(temp_conf), path = "temp_conf.csv")
temp_conf
write_csv(x = head(temp_prophet), path = "temp_prophet.csv")
write_csv(x = head(temp_prophet_death), path = "temp_prophet_death.csv")
tail(future)
forecasted_conf
